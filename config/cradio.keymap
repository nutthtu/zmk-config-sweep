// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 5000
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <2000>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        esc1 {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        bkk {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
        };

        ctrll {
            bindings = <&kp LCTRL>;
            key-positions = <10 11>;
        };

        ctrjr {
            bindings = <&kp RCTRL>;
            key-positions = <18 19>;
        };

        altl {
            bindings = <&kp LEFT_ALT>;
            key-positions = <21 22>;
        };

        altr {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <27 28>;
        };

        shiftl {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <20 21>;
        };

        shiftr {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <29 28>;
        };

        guil {
            bindings = <&kp LEFT_GUI>;
            key-positions = <11 12>;
        };

        guir {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <17 18>;
        };

        delc {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q  &kp W  &kp E  &kp R      &kp T          &kp Y        &kp U            &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F      &kp G          &kp H        &kp J            &kp K      &kp L    &kp SEMICOLON
&kp Z  &kp X  &kp C  &kp V      &kp B          &kp N        &kp M            &kp COMMA  &kp DOT  &kp SLASH
                     &lt 2 TAB  &lt 3 SPACE    &lt 4 ENTER  &lt 5 BACKSPACE
            >;
        };

        Base_Colemak {
            bindings = <
&kp Q  &kp W  &kp F  &kp P      &kp G          &kp J        &kp L            &kp U      &kp Y    &kp SEMI
&kp A  &kp R  &kp S  &kp T      &kp D          &kp H        &kp N            &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp V      &kp B          &kp K        &kp M            &kp COMMA  &kp DOT  &kp FSLH
                     &lt 2 TAB  &lt 3 SPACE    &lt 4 ENTER  &lt 5 BACKSPACE
            >;
        };

        SYMBOL {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &kp GRAVE  &kp TILDE         &kp MINUS          &kp EQUAL  &kp BSLH
&bt BT_SEL 4  &default_report  &none         &none         &none         &none      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp LBKT   &kp RBKT
&kp LSHFT     &none            &none         &none         &none         &none      &none             &kp COMMA          &kp DOT    &kp RSHFT
                                             &trans        &kp SPACE     &kp ENTER  &kp BSPC
            >;
        };

        NUMBER {
            bindings = <
&kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
&kp N1      &kp N2      &kp N3      &kp N4      &kp N5        &kp N6      &kp N7      &kp N8      &kp N9      &kp N0
&kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &none         &none       &none       &none       &none       &kp RSHFT
                                    &kp TAB     &trans        &kp ENTER   &kp BSPC
            >;
        };

        FN {
            bindings = <
&kp F1     &kp F2     &kp F3    &kp F4    &kp F5       &kp F6  &kp F7    &kp F8    &kp F9     &kp F10
&kp F11    &none      &none     &none     &none        &none   &none     &none     &none      &kp F12
&kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT  &none        &none   &kp RALT  &kp RGUI  &kp RCTRL  &kp RSHFT
                                &kp TAB   &kp SPACE    &trans  &kp BSPC
            >;
        };

        NAV {
            bindings = <
&kp HOME   &kp UP     &kp END    &kp PG_UP  &kp PRINTSCREEN    &none      &none   &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN  &kp DELETE         &none      &none   &none       &none              &none
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp CAPS           &none      &none   &none       &none              &none
                                 &mo 6      &kp SPACE          &kp ENTER  &trans
            >;
        };

        MOUSE {
            bindings = <
&kp HOME        &mmv MOVE_UP    &kp END          &kp PG_UP  &msc SCRL_UP      &tog 1     &none   &none     &none     &none
&mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp PG_DN  &msc SCRL_DOWN    &none      &none   &mkp MB1  &mkp MB2  &mkp MB3
&kp LC(Z)       &kp LC(X)       &kp LC(C)        &kp LC(V)  &none             &none      &none   &none     &none     &none
                                                 &trans     &kp SPACE         &kp ENTER  &trans
            >;
        };
    };
};
